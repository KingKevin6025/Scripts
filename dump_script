getgenv()["dump_script"] = function(script_path, copy_to_clipboard)
	local script_path = script_path or error("Invalid script")

    --// Check if file already exists 
    local file_name 
    if isfile(("%s_dump.lua"):format(script_path.Name)) then 
        file_name = ("%s_dump_%s.lua"):format(script_path.Name, tostring(tick()))
    else 
        file_name = tostring(("%s_dump.lua"):format(script_path.Name))
    end 

	local dump = ([[
	// Function Dumper made by King.Kevin#6025
	// Dumping script: %s
	]]):format(tostring(script_path:GetFullName()))
	
	local functions = {}
    local function_count = 0

    local data_base = {}
	
	--// Add string to dump
    function functions:add_to_dump(string, indentation, new_line)
        local new_line = new_line or true
        dump = dump .. ("%s%s%s"):format(string.rep("    ", indentation), tostring(string), new_line and "\n" or "")
    end

    --// Get function name
	function functions:get_function_name(func)
		local n = debug.getinfo(func).name
		return n ~= "" and n or "Unknown Name"
	end

    function functions:dump_table(input, indent, index)
        local indent = indent < 0 and 0 or indent
        functions:add_to_dump(("%s [%s] %s"):format(tostring(index), tostring(type(input)), tostring(input)), indent - 1)

        local count = 0
        for index, value in pairs(input) do
            count = count + 1
            if type(value) == "function" then
                functions:add_to_dump(("%d [function] = %s"):format(count, functions:get_function_name(value)), indent)
            elseif type(value) == "table" then
                if not data_base[value] then
                    data_base[value] = true
                    functions:add_to_dump(("%d [table]:"):format(count), indent)
                    functions:dump_table(value, indent + 1, index)
                else
                    functions:add_to_dump(("%d [table] (Recursive table detected)"):format(count), indent)
                end
            else
                functions:add_to_dump(("%d [%s] = %s"):format(count, tostring(type(value)), tostring(value)), indent)
            end
        end
    end

    function functions:dump_function(input, indent)
        functions:add_to_dump(("\nFunction Dump: %s"):format(functions:get_function_name(input)), indent)

        functions:add_to_dump(("\nFunction Upvalues: %s"):format(functions:get_function_name(input)), indent)
        for index, upvalue in pairs(debug.getupvalues(input)) do
            if type(upvalue) == "function" then
                functions:add_to_dump(("%d [function] = %s"):format(index, functions:get_function_name(upvalue)), indent + 1)
            elseif type(upvalue) == "table" then
                if not data_base[upvalue] then
                    data_base[upvalue] = true
                    functions:add_to_dump(("%d [table]:"):format(index), indent + 1)
                    functions:dump_table(upvalue, indent + 2, index)
                else
                    functions:add_to_dump(("%d [table] (Recursive table detected)"):format(index), indent + 1)
                end
            else
                functions:add_to_dump(("%d [%s] = %s"):format(index, tostring(type(upvalue)), tostring(upvalue)), indent + 1)
            end
        end

        -- Dump function constants 
        functions:add_to_dump(("\nFunction Constants: %s"):format(functions:get_function_name(input)), indent)
        for index, constant in pairs(debug.getconstants(input)) do
            if type(constant) == "function" then
                functions:add_to_dump(("%d [function] = %s"):format(index, functions:get_function_name(constant)), indent + 1)
            elseif type(constant) == "table" then
                if not data_base[constant] then
                    data_base[constant] = true
                    functions:add_to_dump(("%d [table]:"):format(index), indent + 1)
                    functions:dump_table(constant, indent + 2, index)
                else
                    functions:add_to_dump(("%d [table] (Recursive table detected)"):format(index), indent + 1)
                end
            else
                functions:add_to_dump(("%d [%s] = %s"):format(index, tostring(type(constant)), tostring(constant)), indent + 1)
            end
        end
    end

    --// Dump script functions
    for _, _function in pairs(getgc()) do
        if getfenv(_function).script and getfenv(_function).script == script_path and type(_function) == "function" then
            functions:dump_function(_function, 0)
            functions:add_to_dump(("="):rep(100), 0, false)
        end
    end

    --// Write dump to clipboard
    if copy_to_clipboard then
        return setclipboard(dump)
    end

    --// Write dump to a file
    writefile(file_name, dump)
end

print("Loaded dump_script function by King.Kevin#6025")
